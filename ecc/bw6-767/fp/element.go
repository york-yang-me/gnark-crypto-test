// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fp

// /!\ WARNING /!\
// this code has not been audited and is provided as-is. In particular,
// there is no security guarantees such as constant time implementation
// or side-channel attack resistance
// /!\ WARNING /!\

import (
	"crypto/rand"
	"encoding/binary"
	"errors"
	"io"
	"math/big"
	"math/bits"
	"reflect"
	"strconv"
	"sync"
)

// Element represents a field element stored on 12 words (uint64)
// Element are assumed to be in Montgomery form in all methods
// field modulus q =
//
// 496597749679620867773432037469214230242402307330180853437434581099336634619713640485778675608223760166307530047354464605410050411581079376994803852937842168733702867087556948851016246640584660942486895230518034810309227309966899431
type Element [12]uint64

// Limbs number of 64 bits words needed to represent Element
const Limbs = 12

// Bits number bits needed to represent Element
const Bits = 767

// Bytes number bytes needed to represent Element
const Bytes = Limbs * 8

// field modulus stored as big.Int
var _modulus big.Int

// Modulus returns q as a big.Int
// q =
//
// 496597749679620867773432037469214230242402307330180853437434581099336634619713640485778675608223760166307530047354464605410050411581079376994803852937842168733702867087556948851016246640584660942486895230518034810309227309966899431
func Modulus() *big.Int {
	return new(big.Int).Set(&_modulus)
}

// q (modulus)
var qElement = Element{
	7536398694092191975,
	4195297178731265721,
	3563226917089989832,
	8988078232227647068,
	18306843046445971417,
	15865302703439768856,
	4455645219706890458,
	7376407322369851517,
	3528800721260772377,
	14082127155138907714,
	4045814274353148564,
	5900486210981763362,
}

// rSquare
var rSquare = Element{
	8634692284678380522,
	2282241256281975462,
	11684820115133218351,
	4684938581680115075,
	1869072416124530788,
	4122706237932245081,
	927470753766507181,
	12475576287682612228,
	7902219151848061722,
	2105067505756563227,
	13859714532645730046,
	5085490002915957746,
}

var bigIntPool = sync.Pool{
	New: func() interface{} {
		return new(big.Int)
	},
}

func init() {
	_modulus.SetString("496597749679620867773432037469214230242402307330180853437434581099336634619713640485778675608223760166307530047354464605410050411581079376994803852937842168733702867087556948851016246640584660942486895230518034810309227309966899431", 10)
}

// SetUint64 z = v, sets z LSB to v (non-Montgomery form) and convert z to Montgomery form
func (z *Element) SetUint64(v uint64) *Element {
	*z = Element{v}
	return z.Mul(z, &rSquare) // z.ToMont()
}

// Set z = x
func (z *Element) Set(x *Element) *Element {
	z[0] = x[0]
	z[1] = x[1]
	z[2] = x[2]
	z[3] = x[3]
	z[4] = x[4]
	z[5] = x[5]
	z[6] = x[6]
	z[7] = x[7]
	z[8] = x[8]
	z[9] = x[9]
	z[10] = x[10]
	z[11] = x[11]
	return z
}

// SetInterface converts provided interface into Element
// returns an error if provided type is not supported
// supported types: Element, *Element, uint64, int, string (interpreted as base10 integer),
// *big.Int, big.Int, []byte
func (z *Element) SetInterface(i1 interface{}) (*Element, error) {
	switch c1 := i1.(type) {
	case Element:
		return z.Set(&c1), nil
	case *Element:
		return z.Set(c1), nil
	case uint64:
		return z.SetUint64(c1), nil
	case int:
		return z.SetString(strconv.Itoa(c1)), nil
	case string:
		return z.SetString(c1), nil
	case *big.Int:
		return z.SetBigInt(c1), nil
	case big.Int:
		return z.SetBigInt(&c1), nil
	case []byte:
		return z.SetBytes(c1), nil
	default:
		return nil, errors.New("can't set fp.Element from type " + reflect.TypeOf(i1).String())
	}
}

// SetZero z = 0
func (z *Element) SetZero() *Element {
	z[0] = 0
	z[1] = 0
	z[2] = 0
	z[3] = 0
	z[4] = 0
	z[5] = 0
	z[6] = 0
	z[7] = 0
	z[8] = 0
	z[9] = 0
	z[10] = 0
	z[11] = 0
	return z
}

// SetOne z = 1 (in Montgomery form)
func (z *Element) SetOne() *Element {
	z[0] = 14284292065142527307
	z[1] = 5860852537515754451
	z[2] = 7757063322439582119
	z[3] = 9929253450736162027
	z[4] = 419703081790740595
	z[5] = 7744324110809348277
	z[6] = 5079808414588880239
	z[7] = 14764266180309548680
	z[8] = 7860341909927234483
	z[9] = 13093850755711931705
	z[10] = 6309301250650105921
	z[11] = 745285440764261529
	return z
}

// Div z = x*y^-1 mod q
func (z *Element) Div(x, y *Element) *Element {
	var yInv Element
	yInv.Inverse(y)
	z.Mul(x, &yInv)
	return z
}

// Equal returns z == x
func (z *Element) Equal(x *Element) bool {
	return (z[11] == x[11]) && (z[10] == x[10]) && (z[9] == x[9]) && (z[8] == x[8]) && (z[7] == x[7]) && (z[6] == x[6]) && (z[5] == x[5]) && (z[4] == x[4]) && (z[3] == x[3]) && (z[2] == x[2]) && (z[1] == x[1]) && (z[0] == x[0])
}

// IsZero returns z == 0
func (z *Element) IsZero() bool {
	return (z[11] | z[10] | z[9] | z[8] | z[7] | z[6] | z[5] | z[4] | z[3] | z[2] | z[1] | z[0]) == 0
}

// Cmp compares (lexicographic order) z and x and returns:
//
//	-1 if z <  x
//	 0 if z == x
//	+1 if z >  x
func (z *Element) Cmp(x *Element) int {
	_z := *z
	_x := *x
	_z.FromMont()
	_x.FromMont()
	if _z[11] > _x[11] {
		return 1
	} else if _z[11] < _x[11] {
		return -1
	}
	if _z[10] > _x[10] {
		return 1
	} else if _z[10] < _x[10] {
		return -1
	}
	if _z[9] > _x[9] {
		return 1
	} else if _z[9] < _x[9] {
		return -1
	}
	if _z[8] > _x[8] {
		return 1
	} else if _z[8] < _x[8] {
		return -1
	}
	if _z[7] > _x[7] {
		return 1
	} else if _z[7] < _x[7] {
		return -1
	}
	if _z[6] > _x[6] {
		return 1
	} else if _z[6] < _x[6] {
		return -1
	}
	if _z[5] > _x[5] {
		return 1
	} else if _z[5] < _x[5] {
		return -1
	}
	if _z[4] > _x[4] {
		return 1
	} else if _z[4] < _x[4] {
		return -1
	}
	if _z[3] > _x[3] {
		return 1
	} else if _z[3] < _x[3] {
		return -1
	}
	if _z[2] > _x[2] {
		return 1
	} else if _z[2] < _x[2] {
		return -1
	}
	if _z[1] > _x[1] {
		return 1
	} else if _z[1] < _x[1] {
		return -1
	}
	if _z[0] > _x[0] {
		return 1
	} else if _z[0] < _x[0] {
		return -1
	}
	return 0
}

// LexicographicallyLargest returns true if this element is strictly lexicographically
// larger than its negation, false otherwise
func (z *Element) LexicographicallyLargest() bool {
	// adapted from github.com/zkcrypto/bls12_381
	// we check if the element is larger than (q-1) / 2
	// if z - (((q -1) / 2) + 1) have no underflow, then z > (q-1) / 2

	_z := *z
	_z.FromMont()

	var b uint64
	_, b = bits.Sub64(_z[0], 12991571383900871796, 0)
	_, b = bits.Sub64(_z[1], 2097648589365632860, b)
	_, b = bits.Sub64(_z[2], 1781613458544994916, b)
	_, b = bits.Sub64(_z[3], 13717411152968599342, b)
	_, b = bits.Sub64(_z[4], 9153421523222985708, b)
	_, b = bits.Sub64(_z[5], 7932651351719884428, b)
	_, b = bits.Sub64(_z[6], 11451194646708221037, b)
	_, b = bits.Sub64(_z[7], 12911575698039701566, b)
	_, b = bits.Sub64(_z[8], 1764400360630386188, b)
	_, b = bits.Sub64(_z[9], 7041063577569453857, b)
	_, b = bits.Sub64(_z[10], 2022907137176574282, b)
	_, b = bits.Sub64(_z[11], 2950243105490881681, b)

	return b == 0
}

// SetRandom sets z to a random element < q
func (z *Element) SetRandom() (*Element, error) {
	var bytes [96]byte
	if _, err := io.ReadFull(rand.Reader, bytes[:]); err != nil {
		return nil, err
	}
	z[0] = binary.BigEndian.Uint64(bytes[0:8])
	z[1] = binary.BigEndian.Uint64(bytes[8:16])
	z[2] = binary.BigEndian.Uint64(bytes[16:24])
	z[3] = binary.BigEndian.Uint64(bytes[24:32])
	z[4] = binary.BigEndian.Uint64(bytes[32:40])
	z[5] = binary.BigEndian.Uint64(bytes[40:48])
	z[6] = binary.BigEndian.Uint64(bytes[48:56])
	z[7] = binary.BigEndian.Uint64(bytes[56:64])
	z[8] = binary.BigEndian.Uint64(bytes[64:72])
	z[9] = binary.BigEndian.Uint64(bytes[72:80])
	z[10] = binary.BigEndian.Uint64(bytes[80:88])
	z[11] = binary.BigEndian.Uint64(bytes[88:96])
	z[11] %= 5900486210981763362

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}

	return z, nil
}

// One returns 1 (in montgommery form)
func One() Element {
	var one Element
	one.SetOne()
	return one
}

// API with assembly impl

// Mul z = x * y mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Mul(x, y *Element) *Element {
	mul(z, x, y)
	return z
}

// Square z = x * x mod q
// see https://hackmd.io/@zkteam/modular_multiplication
func (z *Element) Square(x *Element) *Element {
	mul(z, x, x)
	return z
}

// FromMont converts z in place (i.e. mutates) from Montgomery to regular representation
// sets and returns z = z * 1
func (z *Element) FromMont() *Element {
	fromMont(z)
	return z
}

// Add z = x + y mod q
func (z *Element) Add(x, y *Element) *Element {
	add(z, x, y)
	return z
}

// Double z = x + x mod q, aka Lsh 1
func (z *Element) Double(x *Element) *Element {
	double(z, x)
	return z
}

// Sub  z = x - y mod q
func (z *Element) Sub(x, y *Element) *Element {
	sub(z, x, y)
	return z
}

// Neg z = q - x
func (z *Element) Neg(x *Element) *Element {
	neg(z, x)
	return z
}

// Generic (no ADX instructions, no AMD64) versions of multiplication and squaring algorithms

func _mulGeneric(z, x, y *Element) {

	var t [12]uint64
	var c [3]uint64
	{
		// round 0
		v := x[0]
		c[1], c[0] = bits.Mul64(v, y[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd1(v, y[1], c[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd1(v, y[2], c[1])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd1(v, y[3], c[1])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd1(v, y[4], c[1])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd1(v, y[5], c[1])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd1(v, y[6], c[1])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd1(v, y[7], c[1])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd1(v, y[8], c[1])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd1(v, y[9], c[1])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd1(v, y[10], c[1])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd1(v, y[11], c[1])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 1
		v := x[1]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 2
		v := x[2]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 3
		v := x[3]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 4
		v := x[4]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 5
		v := x[5]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 6
		v := x[6]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 7
		v := x[7]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 8
		v := x[8]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 9
		v := x[9]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 10
		v := x[10]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], t[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], t[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], t[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], t[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], t[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], t[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], t[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], t[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], t[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], t[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		t[11], t[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}
	{
		// round 11
		v := x[11]
		c[1], c[0] = madd1(v, y[0], t[0])
		m := c[0] * 12668153246637597993
		c[2] = madd0(m, 7536398694092191975, c[0])
		c[1], c[0] = madd2(v, y[1], c[1], t[1])
		c[2], z[0] = madd2(m, 4195297178731265721, c[2], c[0])
		c[1], c[0] = madd2(v, y[2], c[1], t[2])
		c[2], z[1] = madd2(m, 3563226917089989832, c[2], c[0])
		c[1], c[0] = madd2(v, y[3], c[1], t[3])
		c[2], z[2] = madd2(m, 8988078232227647068, c[2], c[0])
		c[1], c[0] = madd2(v, y[4], c[1], t[4])
		c[2], z[3] = madd2(m, 18306843046445971417, c[2], c[0])
		c[1], c[0] = madd2(v, y[5], c[1], t[5])
		c[2], z[4] = madd2(m, 15865302703439768856, c[2], c[0])
		c[1], c[0] = madd2(v, y[6], c[1], t[6])
		c[2], z[5] = madd2(m, 4455645219706890458, c[2], c[0])
		c[1], c[0] = madd2(v, y[7], c[1], t[7])
		c[2], z[6] = madd2(m, 7376407322369851517, c[2], c[0])
		c[1], c[0] = madd2(v, y[8], c[1], t[8])
		c[2], z[7] = madd2(m, 3528800721260772377, c[2], c[0])
		c[1], c[0] = madd2(v, y[9], c[1], t[9])
		c[2], z[8] = madd2(m, 14082127155138907714, c[2], c[0])
		c[1], c[0] = madd2(v, y[10], c[1], t[10])
		c[2], z[9] = madd2(m, 4045814274353148564, c[2], c[0])
		c[1], c[0] = madd2(v, y[11], c[1], t[11])
		z[11], z[10] = madd3(m, 5900486210981763362, c[0], c[2], c[1])
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}
}

func _fromMontGeneric(z *Element) {
	// the following lines implement z = z * 1
	// with a modified CIOS montgomery multiplication
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}
	{
		// m = z[0]n'[0] mod W
		m := z[0] * 12668153246637597993
		C := madd0(m, 7536398694092191975, z[0])
		C, z[0] = madd2(m, 4195297178731265721, z[1], C)
		C, z[1] = madd2(m, 3563226917089989832, z[2], C)
		C, z[2] = madd2(m, 8988078232227647068, z[3], C)
		C, z[3] = madd2(m, 18306843046445971417, z[4], C)
		C, z[4] = madd2(m, 15865302703439768856, z[5], C)
		C, z[5] = madd2(m, 4455645219706890458, z[6], C)
		C, z[6] = madd2(m, 7376407322369851517, z[7], C)
		C, z[7] = madd2(m, 3528800721260772377, z[8], C)
		C, z[8] = madd2(m, 14082127155138907714, z[9], C)
		C, z[9] = madd2(m, 4045814274353148564, z[10], C)
		C, z[10] = madd2(m, 5900486210981763362, z[11], C)
		z[11] = C
	}

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}
}

func _addGeneric(z, x, y *Element) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], y[0], 0)
	z[1], carry = bits.Add64(x[1], y[1], carry)
	z[2], carry = bits.Add64(x[2], y[2], carry)
	z[3], carry = bits.Add64(x[3], y[3], carry)
	z[4], carry = bits.Add64(x[4], y[4], carry)
	z[5], carry = bits.Add64(x[5], y[5], carry)
	z[6], carry = bits.Add64(x[6], y[6], carry)
	z[7], carry = bits.Add64(x[7], y[7], carry)
	z[8], carry = bits.Add64(x[8], y[8], carry)
	z[9], carry = bits.Add64(x[9], y[9], carry)
	z[10], carry = bits.Add64(x[10], y[10], carry)
	z[11], _ = bits.Add64(x[11], y[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}
}

func _doubleGeneric(z, x *Element) {
	var carry uint64

	z[0], carry = bits.Add64(x[0], x[0], 0)
	z[1], carry = bits.Add64(x[1], x[1], carry)
	z[2], carry = bits.Add64(x[2], x[2], carry)
	z[3], carry = bits.Add64(x[3], x[3], carry)
	z[4], carry = bits.Add64(x[4], x[4], carry)
	z[5], carry = bits.Add64(x[5], x[5], carry)
	z[6], carry = bits.Add64(x[6], x[6], carry)
	z[7], carry = bits.Add64(x[7], x[7], carry)
	z[8], carry = bits.Add64(x[8], x[8], carry)
	z[9], carry = bits.Add64(x[9], x[9], carry)
	z[10], carry = bits.Add64(x[10], x[10], carry)
	z[11], _ = bits.Add64(x[11], x[11], carry)

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}
}

func _subGeneric(z, x, y *Element) {
	var b uint64
	z[0], b = bits.Sub64(x[0], y[0], 0)
	z[1], b = bits.Sub64(x[1], y[1], b)
	z[2], b = bits.Sub64(x[2], y[2], b)
	z[3], b = bits.Sub64(x[3], y[3], b)
	z[4], b = bits.Sub64(x[4], y[4], b)
	z[5], b = bits.Sub64(x[5], y[5], b)
	z[6], b = bits.Sub64(x[6], y[6], b)
	z[7], b = bits.Sub64(x[7], y[7], b)
	z[8], b = bits.Sub64(x[8], y[8], b)
	z[9], b = bits.Sub64(x[9], y[9], b)
	z[10], b = bits.Sub64(x[10], y[10], b)
	z[11], b = bits.Sub64(x[11], y[11], b)
	if b != 0 {
		var c uint64
		z[0], c = bits.Add64(z[0], 7536398694092191975, 0)
		z[1], c = bits.Add64(z[1], 4195297178731265721, c)
		z[2], c = bits.Add64(z[2], 3563226917089989832, c)
		z[3], c = bits.Add64(z[3], 8988078232227647068, c)
		z[4], c = bits.Add64(z[4], 18306843046445971417, c)
		z[5], c = bits.Add64(z[5], 15865302703439768856, c)
		z[6], c = bits.Add64(z[6], 4455645219706890458, c)
		z[7], c = bits.Add64(z[7], 7376407322369851517, c)
		z[8], c = bits.Add64(z[8], 3528800721260772377, c)
		z[9], c = bits.Add64(z[9], 14082127155138907714, c)
		z[10], c = bits.Add64(z[10], 4045814274353148564, c)
		z[11], _ = bits.Add64(z[11], 5900486210981763362, c)
	}
}

func _negGeneric(z, x *Element) {
	if x.IsZero() {
		z.SetZero()
		return
	}
	var borrow uint64
	z[0], borrow = bits.Sub64(7536398694092191975, x[0], 0)
	z[1], borrow = bits.Sub64(4195297178731265721, x[1], borrow)
	z[2], borrow = bits.Sub64(3563226917089989832, x[2], borrow)
	z[3], borrow = bits.Sub64(8988078232227647068, x[3], borrow)
	z[4], borrow = bits.Sub64(18306843046445971417, x[4], borrow)
	z[5], borrow = bits.Sub64(15865302703439768856, x[5], borrow)
	z[6], borrow = bits.Sub64(4455645219706890458, x[6], borrow)
	z[7], borrow = bits.Sub64(7376407322369851517, x[7], borrow)
	z[8], borrow = bits.Sub64(3528800721260772377, x[8], borrow)
	z[9], borrow = bits.Sub64(14082127155138907714, x[9], borrow)
	z[10], borrow = bits.Sub64(4045814274353148564, x[10], borrow)
	z[11], _ = bits.Sub64(5900486210981763362, x[11], borrow)
}

func _reduceGeneric(z *Element) {

	// if z > q --> z -= q
	// note: this is NOT constant time
	if !(z[11] < 5900486210981763362 || (z[11] == 5900486210981763362 && (z[10] < 4045814274353148564 || (z[10] == 4045814274353148564 && (z[9] < 14082127155138907714 || (z[9] == 14082127155138907714 && (z[8] < 3528800721260772377 || (z[8] == 3528800721260772377 && (z[7] < 7376407322369851517 || (z[7] == 7376407322369851517 && (z[6] < 4455645219706890458 || (z[6] == 4455645219706890458 && (z[5] < 15865302703439768856 || (z[5] == 15865302703439768856 && (z[4] < 18306843046445971417 || (z[4] == 18306843046445971417 && (z[3] < 8988078232227647068 || (z[3] == 8988078232227647068 && (z[2] < 3563226917089989832 || (z[2] == 3563226917089989832 && (z[1] < 4195297178731265721 || (z[1] == 4195297178731265721 && (z[0] < 7536398694092191975))))))))))))))))))))))) {
		var b uint64
		z[0], b = bits.Sub64(z[0], 7536398694092191975, 0)
		z[1], b = bits.Sub64(z[1], 4195297178731265721, b)
		z[2], b = bits.Sub64(z[2], 3563226917089989832, b)
		z[3], b = bits.Sub64(z[3], 8988078232227647068, b)
		z[4], b = bits.Sub64(z[4], 18306843046445971417, b)
		z[5], b = bits.Sub64(z[5], 15865302703439768856, b)
		z[6], b = bits.Sub64(z[6], 4455645219706890458, b)
		z[7], b = bits.Sub64(z[7], 7376407322369851517, b)
		z[8], b = bits.Sub64(z[8], 3528800721260772377, b)
		z[9], b = bits.Sub64(z[9], 14082127155138907714, b)
		z[10], b = bits.Sub64(z[10], 4045814274353148564, b)
		z[11], _ = bits.Sub64(z[11], 5900486210981763362, b)
	}
}

func mulByConstant(z *Element, c uint8) {
	switch c {
	case 0:
		z.SetZero()
		return
	case 1:
		return
	case 2:
		z.Double(z)
		return
	case 3:
		_z := *z
		z.Double(z).Add(z, &_z)
	case 5:
		_z := *z
		z.Double(z).Double(z).Add(z, &_z)
	default:
		var y Element
		y.SetUint64(uint64(c))
		z.Mul(z, &y)
	}
}

// BatchInvert returns a new slice with every element inverted.
// Uses Montgomery batch inversion trick
func BatchInvert(a []Element) []Element {
	res := make([]Element, len(a))
	if len(a) == 0 {
		return res
	}

	zeroes := make([]bool, len(a))
	accumulator := One()

	for i := 0; i < len(a); i++ {
		if a[i].IsZero() {
			zeroes[i] = true
			continue
		}
		res[i] = accumulator
		accumulator.Mul(&accumulator, &a[i])
	}

	accumulator.Inverse(&accumulator)

	for i := len(a) - 1; i >= 0; i-- {
		if zeroes[i] {
			continue
		}
		res[i].Mul(&res[i], &accumulator)
		accumulator.Mul(&accumulator, &a[i])
	}

	return res
}

// Exp z = x^exponent mod q
func (z *Element) Exp(x Element, exponent *big.Int) *Element {
	var bZero big.Int
	if exponent.Cmp(&bZero) == 0 {
		return z.SetOne()
	}

	z.Set(&x)

	for i := exponent.BitLen() - 2; i >= 0; i-- {
		z.Square(z)
		if exponent.Bit(i) == 1 {
			z.Mul(z, &x)
		}
	}

	return z
}

// ToMont converts z to Montgomery form
// sets and returns z = z * r^2
func (z *Element) ToMont() *Element {
	return z.Mul(z, &rSquare)
}

// ToRegular returns z in regular form (doesn't mutate z)
func (z Element) ToRegular() Element {
	return *z.FromMont()
}

// String returns the string form of an Element in Montgomery form
func (z *Element) String() string {
	vv := bigIntPool.Get().(*big.Int)
	defer bigIntPool.Put(vv)
	return z.ToBigIntRegular(vv).String()
}

// ToBigInt returns z as a big.Int in Montgomery form
func (z *Element) ToBigInt(res *big.Int) *big.Int {
	var b [Limbs * 8]byte
	binary.BigEndian.PutUint64(b[88:96], z[0])
	binary.BigEndian.PutUint64(b[80:88], z[1])
	binary.BigEndian.PutUint64(b[72:80], z[2])
	binary.BigEndian.PutUint64(b[64:72], z[3])
	binary.BigEndian.PutUint64(b[56:64], z[4])
	binary.BigEndian.PutUint64(b[48:56], z[5])
	binary.BigEndian.PutUint64(b[40:48], z[6])
	binary.BigEndian.PutUint64(b[32:40], z[7])
	binary.BigEndian.PutUint64(b[24:32], z[8])
	binary.BigEndian.PutUint64(b[16:24], z[9])
	binary.BigEndian.PutUint64(b[8:16], z[10])
	binary.BigEndian.PutUint64(b[0:8], z[11])

	return res.SetBytes(b[:])
}

// ToBigIntRegular returns z as a big.Int in regular form
func (z Element) ToBigIntRegular(res *big.Int) *big.Int {
	z.FromMont()
	return z.ToBigInt(res)
}

// Bytes returns the regular (non montgomery) value
// of z as a big-endian byte array.
func (z *Element) Bytes() (res [Limbs * 8]byte) {
	_z := z.ToRegular()
	binary.BigEndian.PutUint64(res[88:96], _z[0])
	binary.BigEndian.PutUint64(res[80:88], _z[1])
	binary.BigEndian.PutUint64(res[72:80], _z[2])
	binary.BigEndian.PutUint64(res[64:72], _z[3])
	binary.BigEndian.PutUint64(res[56:64], _z[4])
	binary.BigEndian.PutUint64(res[48:56], _z[5])
	binary.BigEndian.PutUint64(res[40:48], _z[6])
	binary.BigEndian.PutUint64(res[32:40], _z[7])
	binary.BigEndian.PutUint64(res[24:32], _z[8])
	binary.BigEndian.PutUint64(res[16:24], _z[9])
	binary.BigEndian.PutUint64(res[8:16], _z[10])
	binary.BigEndian.PutUint64(res[0:8], _z[11])

	return
}

// Marshal returns the regular (non montgomery) value
// of z as a big-endian byte slice.
func (z *Element) Marshal() []byte {
	b := z.Bytes()
	return b[:]
}

// SetBytes interprets e as the bytes of a big-endian unsigned integer,
// sets z to that value (in Montgomery form), and returns z.
func (z *Element) SetBytes(e []byte) *Element {
	// get a big int from our pool
	vv := bigIntPool.Get().(*big.Int)
	vv.SetBytes(e)

	// set big int
	z.SetBigInt(vv)

	// put temporary object back in pool
	bigIntPool.Put(vv)

	return z
}

// SetBigInt sets z to v (regular form) and returns z in Montgomery form
func (z *Element) SetBigInt(v *big.Int) *Element {
	z.SetZero()

	var zero big.Int

	// fast path
	c := v.Cmp(&_modulus)
	if c == 0 {
		// v == 0
		return z
	} else if c != 1 && v.Cmp(&zero) != -1 {
		// 0 < v < q
		return z.setBigInt(v)
	}

	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	// copy input + modular reduction
	vv.Set(v)
	vv.Mod(v, &_modulus)

	// set big int byte value
	z.setBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)
	return z
}

// setBigInt assumes 0 <= v < q
func (z *Element) setBigInt(v *big.Int) *Element {
	vBits := v.Bits()

	if bits.UintSize == 64 {
		for i := 0; i < len(vBits); i++ {
			z[i] = uint64(vBits[i])
		}
	} else {
		for i := 0; i < len(vBits); i++ {
			if i%2 == 0 {
				z[i/2] = uint64(vBits[i])
			} else {
				z[i/2] |= uint64(vBits[i]) << 32
			}
		}
	}

	return z.ToMont()
}

// SetString creates a big.Int with s (in base 10) and calls SetBigInt on z
func (z *Element) SetString(s string) *Element {
	// get temporary big int from the pool
	vv := bigIntPool.Get().(*big.Int)

	if _, ok := vv.SetString(s, 10); !ok {
		panic("Element.SetString failed -> can't parse number in base10 into a big.Int")
	}
	z.SetBigInt(vv)

	// release object into pool
	bigIntPool.Put(vv)

	return z
}

var (
	_bLegendreExponentElement *big.Int
	_bSqrtExponentElement     *big.Int
)

func init() {
	_bLegendreExponentElement, _ = new(big.Int).SetString("28f15e792fd44c911c12cf52cd03194a61b6e204c5f7e721187c68c7a0f1fe0cb32f21b05c39003e9eead0dc32e5f46d6e1670601a49368c7f077c60e31efbecbe5e08c402acc72e18b990004ba12a641d1c584738bcdf5cb44b5557638a9c73", 16)
	const sqrtExponentElement = "1478af3c97ea26488e0967a966818ca530db710262fbf3908c3e3463d078ff06599790d82e1c801f4f75686e1972fa36b70b38300d249b463f83be30718f7df65f2f0462015663970c5cc80025d095320e8e2c239c5e6fae5a25aaabb1c54e3a"
	_bSqrtExponentElement, _ = new(big.Int).SetString(sqrtExponentElement, 16)
}

// Legendre returns the Legendre symbol of z (either +1, -1, or 0.)
func (z *Element) Legendre() int {
	var l Element
	// z^((q-1)/2)
	l.Exp(*z, _bLegendreExponentElement)

	if l.IsZero() {
		return 0
	}

	// if l == 1
	if (l[11] == 745285440764261529) && (l[10] == 6309301250650105921) && (l[9] == 13093850755711931705) && (l[8] == 7860341909927234483) && (l[7] == 14764266180309548680) && (l[6] == 5079808414588880239) && (l[5] == 7744324110809348277) && (l[4] == 419703081790740595) && (l[3] == 9929253450736162027) && (l[2] == 7757063322439582119) && (l[1] == 5860852537515754451) && (l[0] == 14284292065142527307) {
		return 1
	}
	return -1
}

// Sqrt z = √x mod q
// if the square root doesn't exist (x is not a square mod q)
// Sqrt leaves z unchanged and returns nil
func (z *Element) Sqrt(x *Element) *Element {
	// q ≡ 3 (mod 4)
	// using  z ≡ ± x^((p+1)/4) (mod q)
	var y, square Element
	y.Exp(*x, _bSqrtExponentElement)
	// as we didn't compute the legendre symbol, ensure we found y such that y * y = x
	square.Square(&y)
	if square.Equal(x) {
		return z.Set(&y)
	}
	return nil
}

// Inverse z = x^-1 mod q
// Algorithm 16 in "Efficient Software-Implementation of Finite Fields with Applications to Cryptography"
// if x == 0, sets and returns z = x
func (z *Element) Inverse(x *Element) *Element {
	if x.IsZero() {
		return z.Set(x)
	}

	// initialize u = q
	var u = Element{
		7536398694092191975,
		4195297178731265721,
		3563226917089989832,
		8988078232227647068,
		18306843046445971417,
		15865302703439768856,
		4455645219706890458,
		7376407322369851517,
		3528800721260772377,
		14082127155138907714,
		4045814274353148564,
		5900486210981763362,
	}

	// initialize s = r^2
	var s = Element{
		8634692284678380522,
		2282241256281975462,
		11684820115133218351,
		4684938581680115075,
		1869072416124530788,
		4122706237932245081,
		927470753766507181,
		12475576287682612228,
		7902219151848061722,
		2105067505756563227,
		13859714532645730046,
		5085490002915957746,
	}

	// r = 0
	r := Element{}

	v := *x

	var carry, borrow, t, t2 uint64
	var bigger bool

	for {
		for v[0]&1 == 0 {

			// v = v >> 1
			t2 = v[11] << 63
			v[11] >>= 1
			t = t2
			t2 = v[10] << 63
			v[10] = (v[10] >> 1) | t
			t = t2
			t2 = v[9] << 63
			v[9] = (v[9] >> 1) | t
			t = t2
			t2 = v[8] << 63
			v[8] = (v[8] >> 1) | t
			t = t2
			t2 = v[7] << 63
			v[7] = (v[7] >> 1) | t
			t = t2
			t2 = v[6] << 63
			v[6] = (v[6] >> 1) | t
			t = t2
			t2 = v[5] << 63
			v[5] = (v[5] >> 1) | t
			t = t2
			t2 = v[4] << 63
			v[4] = (v[4] >> 1) | t
			t = t2
			t2 = v[3] << 63
			v[3] = (v[3] >> 1) | t
			t = t2
			t2 = v[2] << 63
			v[2] = (v[2] >> 1) | t
			t = t2
			t2 = v[1] << 63
			v[1] = (v[1] >> 1) | t
			t = t2
			v[0] = (v[0] >> 1) | t

			if s[0]&1 == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 7536398694092191975, 0)
				s[1], carry = bits.Add64(s[1], 4195297178731265721, carry)
				s[2], carry = bits.Add64(s[2], 3563226917089989832, carry)
				s[3], carry = bits.Add64(s[3], 8988078232227647068, carry)
				s[4], carry = bits.Add64(s[4], 18306843046445971417, carry)
				s[5], carry = bits.Add64(s[5], 15865302703439768856, carry)
				s[6], carry = bits.Add64(s[6], 4455645219706890458, carry)
				s[7], carry = bits.Add64(s[7], 7376407322369851517, carry)
				s[8], carry = bits.Add64(s[8], 3528800721260772377, carry)
				s[9], carry = bits.Add64(s[9], 14082127155138907714, carry)
				s[10], carry = bits.Add64(s[10], 4045814274353148564, carry)
				s[11], _ = bits.Add64(s[11], 5900486210981763362, carry)

			}

			// s = s >> 1
			t2 = s[11] << 63
			s[11] >>= 1
			t = t2
			t2 = s[10] << 63
			s[10] = (s[10] >> 1) | t
			t = t2
			t2 = s[9] << 63
			s[9] = (s[9] >> 1) | t
			t = t2
			t2 = s[8] << 63
			s[8] = (s[8] >> 1) | t
			t = t2
			t2 = s[7] << 63
			s[7] = (s[7] >> 1) | t
			t = t2
			t2 = s[6] << 63
			s[6] = (s[6] >> 1) | t
			t = t2
			t2 = s[5] << 63
			s[5] = (s[5] >> 1) | t
			t = t2
			t2 = s[4] << 63
			s[4] = (s[4] >> 1) | t
			t = t2
			t2 = s[3] << 63
			s[3] = (s[3] >> 1) | t
			t = t2
			t2 = s[2] << 63
			s[2] = (s[2] >> 1) | t
			t = t2
			t2 = s[1] << 63
			s[1] = (s[1] >> 1) | t
			t = t2
			s[0] = (s[0] >> 1) | t

		}
		for u[0]&1 == 0 {

			// u = u >> 1
			t2 = u[11] << 63
			u[11] >>= 1
			t = t2
			t2 = u[10] << 63
			u[10] = (u[10] >> 1) | t
			t = t2
			t2 = u[9] << 63
			u[9] = (u[9] >> 1) | t
			t = t2
			t2 = u[8] << 63
			u[8] = (u[8] >> 1) | t
			t = t2
			t2 = u[7] << 63
			u[7] = (u[7] >> 1) | t
			t = t2
			t2 = u[6] << 63
			u[6] = (u[6] >> 1) | t
			t = t2
			t2 = u[5] << 63
			u[5] = (u[5] >> 1) | t
			t = t2
			t2 = u[4] << 63
			u[4] = (u[4] >> 1) | t
			t = t2
			t2 = u[3] << 63
			u[3] = (u[3] >> 1) | t
			t = t2
			t2 = u[2] << 63
			u[2] = (u[2] >> 1) | t
			t = t2
			t2 = u[1] << 63
			u[1] = (u[1] >> 1) | t
			t = t2
			u[0] = (u[0] >> 1) | t

			if r[0]&1 == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 7536398694092191975, 0)
				r[1], carry = bits.Add64(r[1], 4195297178731265721, carry)
				r[2], carry = bits.Add64(r[2], 3563226917089989832, carry)
				r[3], carry = bits.Add64(r[3], 8988078232227647068, carry)
				r[4], carry = bits.Add64(r[4], 18306843046445971417, carry)
				r[5], carry = bits.Add64(r[5], 15865302703439768856, carry)
				r[6], carry = bits.Add64(r[6], 4455645219706890458, carry)
				r[7], carry = bits.Add64(r[7], 7376407322369851517, carry)
				r[8], carry = bits.Add64(r[8], 3528800721260772377, carry)
				r[9], carry = bits.Add64(r[9], 14082127155138907714, carry)
				r[10], carry = bits.Add64(r[10], 4045814274353148564, carry)
				r[11], _ = bits.Add64(r[11], 5900486210981763362, carry)

			}

			// r = r >> 1
			t2 = r[11] << 63
			r[11] >>= 1
			t = t2
			t2 = r[10] << 63
			r[10] = (r[10] >> 1) | t
			t = t2
			t2 = r[9] << 63
			r[9] = (r[9] >> 1) | t
			t = t2
			t2 = r[8] << 63
			r[8] = (r[8] >> 1) | t
			t = t2
			t2 = r[7] << 63
			r[7] = (r[7] >> 1) | t
			t = t2
			t2 = r[6] << 63
			r[6] = (r[6] >> 1) | t
			t = t2
			t2 = r[5] << 63
			r[5] = (r[5] >> 1) | t
			t = t2
			t2 = r[4] << 63
			r[4] = (r[4] >> 1) | t
			t = t2
			t2 = r[3] << 63
			r[3] = (r[3] >> 1) | t
			t = t2
			t2 = r[2] << 63
			r[2] = (r[2] >> 1) | t
			t = t2
			t2 = r[1] << 63
			r[1] = (r[1] >> 1) | t
			t = t2
			r[0] = (r[0] >> 1) | t

		}

		// v >= u
		bigger = !(v[11] < u[11] || (v[11] == u[11] && (v[10] < u[10] || (v[10] == u[10] && (v[9] < u[9] || (v[9] == u[9] && (v[8] < u[8] || (v[8] == u[8] && (v[7] < u[7] || (v[7] == u[7] && (v[6] < u[6] || (v[6] == u[6] && (v[5] < u[5] || (v[5] == u[5] && (v[4] < u[4] || (v[4] == u[4] && (v[3] < u[3] || (v[3] == u[3] && (v[2] < u[2] || (v[2] == u[2] && (v[1] < u[1] || (v[1] == u[1] && (v[0] < u[0])))))))))))))))))))))))

		if bigger {

			// v = v - u
			v[0], borrow = bits.Sub64(v[0], u[0], 0)
			v[1], borrow = bits.Sub64(v[1], u[1], borrow)
			v[2], borrow = bits.Sub64(v[2], u[2], borrow)
			v[3], borrow = bits.Sub64(v[3], u[3], borrow)
			v[4], borrow = bits.Sub64(v[4], u[4], borrow)
			v[5], borrow = bits.Sub64(v[5], u[5], borrow)
			v[6], borrow = bits.Sub64(v[6], u[6], borrow)
			v[7], borrow = bits.Sub64(v[7], u[7], borrow)
			v[8], borrow = bits.Sub64(v[8], u[8], borrow)
			v[9], borrow = bits.Sub64(v[9], u[9], borrow)
			v[10], borrow = bits.Sub64(v[10], u[10], borrow)
			v[11], _ = bits.Sub64(v[11], u[11], borrow)

			// s = s - r
			s[0], borrow = bits.Sub64(s[0], r[0], 0)
			s[1], borrow = bits.Sub64(s[1], r[1], borrow)
			s[2], borrow = bits.Sub64(s[2], r[2], borrow)
			s[3], borrow = bits.Sub64(s[3], r[3], borrow)
			s[4], borrow = bits.Sub64(s[4], r[4], borrow)
			s[5], borrow = bits.Sub64(s[5], r[5], borrow)
			s[6], borrow = bits.Sub64(s[6], r[6], borrow)
			s[7], borrow = bits.Sub64(s[7], r[7], borrow)
			s[8], borrow = bits.Sub64(s[8], r[8], borrow)
			s[9], borrow = bits.Sub64(s[9], r[9], borrow)
			s[10], borrow = bits.Sub64(s[10], r[10], borrow)
			s[11], borrow = bits.Sub64(s[11], r[11], borrow)

			if borrow == 1 {

				// s = s + q
				s[0], carry = bits.Add64(s[0], 7536398694092191975, 0)
				s[1], carry = bits.Add64(s[1], 4195297178731265721, carry)
				s[2], carry = bits.Add64(s[2], 3563226917089989832, carry)
				s[3], carry = bits.Add64(s[3], 8988078232227647068, carry)
				s[4], carry = bits.Add64(s[4], 18306843046445971417, carry)
				s[5], carry = bits.Add64(s[5], 15865302703439768856, carry)
				s[6], carry = bits.Add64(s[6], 4455645219706890458, carry)
				s[7], carry = bits.Add64(s[7], 7376407322369851517, carry)
				s[8], carry = bits.Add64(s[8], 3528800721260772377, carry)
				s[9], carry = bits.Add64(s[9], 14082127155138907714, carry)
				s[10], carry = bits.Add64(s[10], 4045814274353148564, carry)
				s[11], _ = bits.Add64(s[11], 5900486210981763362, carry)

			}
		} else {

			// u = u - v
			u[0], borrow = bits.Sub64(u[0], v[0], 0)
			u[1], borrow = bits.Sub64(u[1], v[1], borrow)
			u[2], borrow = bits.Sub64(u[2], v[2], borrow)
			u[3], borrow = bits.Sub64(u[3], v[3], borrow)
			u[4], borrow = bits.Sub64(u[4], v[4], borrow)
			u[5], borrow = bits.Sub64(u[5], v[5], borrow)
			u[6], borrow = bits.Sub64(u[6], v[6], borrow)
			u[7], borrow = bits.Sub64(u[7], v[7], borrow)
			u[8], borrow = bits.Sub64(u[8], v[8], borrow)
			u[9], borrow = bits.Sub64(u[9], v[9], borrow)
			u[10], borrow = bits.Sub64(u[10], v[10], borrow)
			u[11], _ = bits.Sub64(u[11], v[11], borrow)

			// r = r - s
			r[0], borrow = bits.Sub64(r[0], s[0], 0)
			r[1], borrow = bits.Sub64(r[1], s[1], borrow)
			r[2], borrow = bits.Sub64(r[2], s[2], borrow)
			r[3], borrow = bits.Sub64(r[3], s[3], borrow)
			r[4], borrow = bits.Sub64(r[4], s[4], borrow)
			r[5], borrow = bits.Sub64(r[5], s[5], borrow)
			r[6], borrow = bits.Sub64(r[6], s[6], borrow)
			r[7], borrow = bits.Sub64(r[7], s[7], borrow)
			r[8], borrow = bits.Sub64(r[8], s[8], borrow)
			r[9], borrow = bits.Sub64(r[9], s[9], borrow)
			r[10], borrow = bits.Sub64(r[10], s[10], borrow)
			r[11], borrow = bits.Sub64(r[11], s[11], borrow)

			if borrow == 1 {

				// r = r + q
				r[0], carry = bits.Add64(r[0], 7536398694092191975, 0)
				r[1], carry = bits.Add64(r[1], 4195297178731265721, carry)
				r[2], carry = bits.Add64(r[2], 3563226917089989832, carry)
				r[3], carry = bits.Add64(r[3], 8988078232227647068, carry)
				r[4], carry = bits.Add64(r[4], 18306843046445971417, carry)
				r[5], carry = bits.Add64(r[5], 15865302703439768856, carry)
				r[6], carry = bits.Add64(r[6], 4455645219706890458, carry)
				r[7], carry = bits.Add64(r[7], 7376407322369851517, carry)
				r[8], carry = bits.Add64(r[8], 3528800721260772377, carry)
				r[9], carry = bits.Add64(r[9], 14082127155138907714, carry)
				r[10], carry = bits.Add64(r[10], 4045814274353148564, carry)
				r[11], _ = bits.Add64(r[11], 5900486210981763362, carry)

			}
		}
		if (u[0] == 1) && (u[11]|u[10]|u[9]|u[8]|u[7]|u[6]|u[5]|u[4]|u[3]|u[2]|u[1]) == 0 {
			return z.Set(&r)
		}
		if (v[0] == 1) && (v[11]|v[10]|v[9]|v[8]|v[7]|v[6]|v[5]|v[4]|v[3]|v[2]|v[1]) == 0 {
			return z.Set(&s)
		}
	}

}
